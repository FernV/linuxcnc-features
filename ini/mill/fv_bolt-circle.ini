[SUBROUTINE]
icon = tool.png
name = Drill Circle
image = simp.png
type = drill-cir
help = 	<b>Create a regular circle</b>
order = ena h1 num cx cy h2 dim opt h4 a ext h3 start depth

[PARAM_ENA]
name = Enabled
type = bool
value = 1

[PARAM_H1]
type = header
name = <b>--- General ---</b>

[PARAM_H2]
type = header
name = <b>--- Dimension ---</b>

[PARAM_H4]
type = header
name = <b>--- Coverage ---</b>

[PARAM_H3]
type = header
name = <b>--- Drilling params ---</b>

[PARAM_CX]
name = cX
type = float
icon = center.png
tool_tip = Center of circle
value = 0

[PARAM_CY]
name = cY
type = float
icon = center.png
tool_tip = Center of circle
value = 0

[PARAM_OPT]
name = Dimension is
type = combo
options = Diameter=1:Distance between holes=0
;icon = diameter.png
tool_tip = Select what dimension means
value = 1

[PARAM_DIM]
name = Dimension
type = float
minimum_value = 0.0
icon = diameter.png
tool_tip = Diameter or distance
value = 2

[PARAM_NUM]
name = Number of holes
type = int
minimum_value = 1
icon = num.png
tool_tip = Number of holes
value = 5

[PARAM_A]
name = Start
type = float
digits = 2
icon = angle.png
tool_tip = Angle of the first hole
value = 0

[PARAM_EXT]
name = Extend
type = float
digits = 2
icon = angle.png
tool_tip = Angle covered by holes
value = 360

[PARAM_DEPTH]
name = Drill depth
type = float
icon = dz.png
tool_tip = Depth of drilling
value = -0.3

[PARAM_START]
name = Start drilling
type = float
minimum_value = 0.0
icon = surface.png
tool_tip = Start drilling at height
value = 0.0

[DEFINITIONS]
content = 
	<eval>self.include_once("rotate-xy.ngc")</eval>	
	<eval>self.include_once("fv_drill-one.ngc")</eval>	


[CALL]
content =
  	(Drill a regular circle of #param_num holes)
 	o<#self_id> if [#param_ena]
 		#<d> = [#param_dim * #<_units_r>]
 		o<#self_id-10> if [#param_opt] ; option diameter
 			#<#self_id-radius> = [#<d> / 2]
 		o<#self_id-10> else ; option distance between holes
 			o<#self_id-10a> if [[#param_ext MOD 360] NE 0]
 				#<#self_id-radius> = [#<d> / 2 / SIN[180 / #param_num]]
 			o<#self_id-10a> else
 				#<#self_id-radius> = [#<d> / SIN[#param_ext / #param_num]]
 			o<#self_id-10a> endif
 		o<#self_id-10> endif
 		
 		o<#self_id-20> if [[[#param_ext MOD 360] NE 0] AND [#param_num GT 1]]
 			#<#self_id-fill> = [#param_ext * #param_num / [#param_num - 1]]
 		o<#self_id-20> else
 			#<#self_id-fill> = #param_ext
 		o<#self_id-20> endif
 	
 		#<i> = 0
 		o<#self_id-loop> while [#<i> LT #param_num]
 	 		o<rotate-xy> CALL [#<#self_id-radius>] [0] [0] [0] [#param_a + [#<#self_id-fill> / #param_num] * #<i>]
 			o<fv_drill-one> CALL [#param_cx + #<_rotate_result_x>] [#param_cy + #<_rotate_result_y>] [#param_depth] [#param_start]
 			#<i> = [#<i> + 1]
 		o<#self_id-loop> endwhile
 	o<#self_id> endif	
	
[BEFORE]
content = 


[AFTER]
content = 
